import{a as d,o as r,h as a,j as o,k as i,_ as n,l as p}from"../chunks/chunk-BgbOFq1D.js";import{u as l,i as s}from"../chunks/chunk-udXPjxc7.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-Db8R8jrI.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-BcTFqFYm.js";import"../chunks/chunk-CDDaPBEL.js";const m={class:"vp-doc VPDoc doc-content"},u="BroadcastingMarkdown",h="zh-CN",c={__name:"+Page",setup(g,{expose:e}){return e({frontmatter:{title:"BroadcastingMarkdown",lang:"zh-CN"}}),l(),(S,t)=>(r(),d("div",m,t[0]||(t[0]=[a('<h1 id="broadcastingmarkdown" tabindex="-1">BroadcastingMarkdown <a class="header-anchor" href="#broadcastingmarkdown" aria-label="Permalink to &quot;BroadcastingMarkdown&quot;">​</a></h1><p>BroadcastingMarkdown</p><h2 id="broadcastingmarkdown-props" tabindex="-1">BroadcastingMarkdown Props <a class="header-anchor" href="#broadcastingmarkdown-props" aria-label="Permalink to &quot;BroadcastingMarkdown Props&quot;">​</a></h2><table><thead><tr><th>prop</th><th>type</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>render</td><td>(text: string) =&gt; string</td><td>defaultRender</td><td>md文本转纯文本的函数</td></tr><tr><td>data</td><td>Array&lt;Paragraph&gt;</td><td>undefined</td><td>段落详情</td></tr><tr><td>source</td><td>String</td><td>‘’</td><td>md 文本</td></tr><tr><td>delay</td><td>Number</td><td>0</td><td>游标阅读延迟</td></tr><tr><td>separators</td><td>Array&lt;string&gt;</td><td>[‘\\n\\n’, ‘\\n’]</td><td>段落切割符号</td></tr><tr><td>keepRead</td><td>Boolean</td><td>false</td><td>组件内会根据当前游标是否和 source 长度一致来判断，是否持续阅读, 当一致时，会关闭阅读状态。但若设置为 true，则会持续阅读, 这在动态接收数据时会有用</td></tr><tr><td>textToSpeech</td><td>TextToSpeech</td><td>undefined</td><td>是否使用自定义语音合成</td></tr><tr><td>processing</td><td>(paragraph: Paragraph) =&gt; void</td><td>noop</td><td>段落处理函数</td></tr><tr><td>status</td><td>TickerStatus</td><td>TickerStatus.pending</td><td></td></tr><tr><td>paragraphMinlength</td><td>Number</td><td>20</td><td></td></tr></tbody></table><h2 id="broadcastingmarkdown-emits" tabindex="-1">BroadcastingMarkdown Emits <a class="header-anchor" href="#broadcastingmarkdown-emits" aria-label="Permalink to &quot;BroadcastingMarkdown Emits&quot;">​</a></h2><table><thead><tr><th>name</th><th>arguments</th><th>description</th></tr></thead><tbody><tr><td>setData</td><td>SetDataEvent</td><td>-</td></tr><tr><td>interrupt</td><td>-</td><td>用户中断</td></tr><tr><td>update:broadcasting</td><td>boolean</td><td>播放</td></tr><tr><td>update:completed</td><td>boolean</td><td>完成</td></tr><tr><td>update:error</td><td>boolean</td><td>错误</td></tr><tr><td>paragraphLoad</td><td>ParagraphLoadEvent</td><td>段落加载</td></tr></tbody></table>',6)])))}},f=Object.freeze(Object.defineProperty({__proto__:null,default:c,lang:h,title:u},Symbol.toStringTag,{value:"Module"})),ot={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@vunk/shared/vike/vue/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:p}},onHydrationEnd:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/zh-CN/+onHydrationEnd.ts",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:s}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/zh-CN/component/broadcasting-markdown/+Page.md",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:f}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"/renderer/+config.ts",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},Layout:{type:"cumulative",definedAtData:[{filePathToShowToUser:"/src/layouts/default/index.vue",fileExportPathToShowToUser:[]}],valueSerialized:[{type:"pointer-import",value:n}]},lang:{type:"standard",definedAtData:{filePathToShowToUser:"/renderer/+lang.ts",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:i}},onCreateApp:{type:"cumulative",definedAtData:[{filePathToShowToUser:"/pages/+onCreateApp.ts",fileExportPathToShowToUser:[]}],valueSerialized:[{type:"plus-file",exportValues:o}]}};export{ot as configValuesSerialized};
